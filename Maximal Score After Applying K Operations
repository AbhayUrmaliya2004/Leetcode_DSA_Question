/*
* Leetcode :- (2530)
* T.C :- O(KlogN)
* S.C :- O(N)
* Approach :- Just take the max PriorityQueue and add everything to this and take out 
* make element after each operation and add to sum and return this
*/
class Solution {
    public long maxKelements(int[] nums, int k) {
        long sum = 0;
        
        PriorityQueue<Integer> pq = new PriorityQueue<>(Comparator.reverseOrder());
        for(int num : nums){
            pq.add(num);
        }
        
        int temp ;
        while(k>0){
            temp = pq.poll();
            sum += temp;
            pq.add((int)Math.ceil(temp/3.0));
            k-- ;
        }
        
        return sum;
    }
}
