/*
* Leetcode :- (2684)
* T.C :- O(M*N*3)
* S.C :- O(M*N)
*/
class Solution {
    public int maxMoves(int[][] grid) {
        int m = grid.length, n=grid[0].length;
        int[][] dp = new int[m][n];
        // inititalise the dp
        for(int i=0 ; i<m ; i++){
            Arrays.fill(dp[i], -1);
        }
        
        int ans = 0;
        for(int i=0 ; i<m ; i++){
            int res = helper(grid, i, 0, dp);
            ans = Math.max(ans, res);
        }
        return ans;
    }
    public int helper(int[][] grid, int i, int j, int[][]dp){
        if(dp[i][j] != -1) return dp[i][j];
        
        int m = grid.length, n=grid[0].length;
        int max = 0, ans = 0;
        if(i-1 >= 0 && j+1<n && grid[i][j] < grid[i-1][j+1]){
            ans = 1+helper(grid, i-1, j+1, dp);
            max = Math.max(ans, max);
        }
        if(j+1<n && grid[i][j] < grid[i][j+1]){
            ans = 1+helper(grid, i, j+1, dp);
            max = Math.max(ans, max);
        }
        if(i+1<m && j+1<n && grid[i][j] < grid[i+1][j+1]){
            ans = 1+helper(grid, i+1, j+1, dp);
            max = Math.max(ans, max);
        }
        
        return dp[i][j] = max;
    }
}
