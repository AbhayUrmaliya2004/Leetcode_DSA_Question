/*
* Leetcode :- (2962)
* T.C :- O(N)
* S.C :- O(1)
* Simple counting of subarrays by checking the required condition and
* if nums[i....j] fulfill the condition then all the subarrays which we will
* get by adding the different elements to the end of the array from (j+1 to n-1)
* will also follow the condition
*/
class Solution {
    public long countSubarrays(int[] nums, int k) {
        long subarrays = 0;

        int i=0, j=0, n = nums.length;
        int maxi = nums[0];
        // find max
        for(int num : nums) maxi = Math.max(maxi, num);

        int count = 0;
        while(j<n){
            if(nums[j] == maxi) count++ ;

            while(count >= k){
                subarrays += (n-j);
                if(nums[i] == maxi) count-- ;
                i++ ;
            } 

            j++ ;
        }

        return subarrays;
    }
}


// LeetCode-(2962) 2nd year solution 
--> S.C. :- O(n), fater than 100%
--> T.C. :- O(1), better than 100%

class Solution {
    public long countSubarrays(int[] nums, int k) {
        long ans = 0 ;
        int l=0 , r=0 , n=nums.length, count=0 ;
        int max = 0 ;
        for(int i:nums)max = Math.max(i,max);
        while(r <= n){
            while(r < n && count < k){
                if(nums[r++] == max)count++ ;    // filling element 
            }
            if(count == k){
                ans += n-r+1 ;
                while(nums[l++] != max)ans += n-r+1 ; // removing elements 
                count-- ;
            }
            else if(r==n)break ;
        }
        return ans ;
    }
}
