/*
* Leetcode :- (689)
* T.C :- O(N)
* S.C :- O(N)
* Intuition :- Let's breakdown the problem so we want sum of three non overlapping subarray 
* so instead of finding that if we make subarray as preSum then this problem will become find the
* max sum of three element in the array
* Thus by making a preMax and suffMax array at each idx we can get the maxValue in left and maxValue in
* right and curr itself thus by traversing we can keep track of maxSum that's it.
*/ 
class Solution {
    public int[] maxSumOfThreeSubarrays(int[] nums, int k) {
        int n = nums.length;

        int[] preSum = new int[n+1];
        for(int i=1 ; i<=n ; i++){
            preSum[i] = preSum[i-1]+nums[i-1];
        }

        // create preMax subarray sum
        int[] leftMaxIdx = new int[n];
        int maxLeftSum = preSum[k]-preSum[0];

        for(int i=k ; i<n ; i++){
            int curSum = preSum[i+1] - preSum[i+1-k]; 
            if(curSum > maxLeftSum){
                maxLeftSum = curSum;
                leftMaxIdx[i] = i - k + 1;
            } else {
                leftMaxIdx[i] = leftMaxIdx[i - 1];
            }
        }

        // create suffmax subarray 
        int[] rightMaxIdx = new int[n];
        int maxRightSum = preSum[n] - preSum[n - k];
        rightMaxIdx[n - k] = n - k;

        for(int i=n-k-1 ; i>=0 ; i--){
            int curSum = preSum[i + k] - preSum[i];
            if (curSum >= maxRightSum) {
                maxRightSum = curSum;
                rightMaxIdx[i] = i;
            } else {
                rightMaxIdx[i] = rightMaxIdx[i + 1];
            }
        }

        int []ans = new int[3];
        int maxSum = 0;
        for(int i=k ; i<=n-2*k ; i++){
            int left = leftMaxIdx[i - 1];
            int right = rightMaxIdx[i + k];
            int curSum = (preSum[left + k] - preSum[left]) +
                             (preSum[i + k] - preSum[i]) +
                             (preSum[right + k] - preSum[right]);

            if(curSum > maxSum){
                maxSum = curSum;
                ans[0] = left;
                ans[1] = i;
                ans[2] = right;
            }
        }


        return ans;   
    }
}
