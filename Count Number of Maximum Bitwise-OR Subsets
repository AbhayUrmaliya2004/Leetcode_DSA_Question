/*
* Leetcode :- (2044)
* T.C :- O(2^N)
* S.C :- O(N) for call stack can optimise this using DP
* Since the nums length os 16 at max so we can do recursion and this we have option
* either to take or not take the element 
*/
class Solution {
    public int countMaxOrSubsets(int[] nums) {
        int maxOr = 0;
        for(int i=0 ; i<nums.length ; i++){
            maxOr = maxOr | nums[i];
        }
        
        return helper(nums, 0, 0, maxOr);
    }
    
    public int helper(int[] nums, int idx, int curOr, int maxOr){
        if(idx == nums.length){
            if(curOr == maxOr) return 1;
            return 0;
        }
        
        int pick = helper(nums, idx+1, curOr|nums[idx], maxOr);
        int notPick = helper(nums, idx+1, curOr, maxOr);
        
        return pick+notPick;
    }
}
