/*
* T.C :- O(N)
* S.C :- O(1)
* Intuition :- remove all the count of 0 even length and 1's even length which are continuous
* then all 1's and 0's will be left which need to be changed OR easy way for every consecutive 
* even odd position check if same then don't need to change
*/
class Solution {
    public int minChanges(String s) {
        int count0=0, count1=0, n=s.length();
        
        for(int i=0 ; i<n ; i++){
            if(s.charAt(i)=='0') count0++;
            else count1++;
        }
        
        for(int i=0 ; i<n ; i+=2){
            char ch1 = s.charAt(i);
            char ch2 = s.charAt(i+1);
            
            if(ch1=='0' && ch2=='0'){
                count0-=2;
            }else if(ch1=='1' && ch2=='1'){
                count1-=2;
            } 
            // else do nothing we need to change atleast one of them
        }
        
        // fun fact at last count0 and count1 will be same that'why they 
        // need to be changed as adjacent 
        return Math.min(count0, count1);
    }
}
