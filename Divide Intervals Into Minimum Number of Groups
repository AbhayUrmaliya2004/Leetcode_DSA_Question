/*
* Leetcode :- (2406)
* T.C :- O(NlogN)
* S.C :- O(N)
* Approach :- Just PQ takes the index of the group which was used and can we add curr interval to
* that group or not
*/
class Solution {
    public int minGroups(int[][] arr) {
        // Sort intervals by their start time
        Arrays.sort(arr, (a, b) -> Integer.compare(a[0], b[0]));
        
        // Min-heap to track the end times of groups
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        
        for (int[] interval : arr) {
            // If the earliest end time is less than the start time of the current interval,
            // we can reuse that group
            if (!pq.isEmpty() && pq.peek() < interval[0]) {
                pq.poll();
            }
            // Add the end time of the current interval (create a new group or reuse an existing one)
            pq.add(interval[1]);
        
        }
        
        // The size of the priority queue will give the number of groups needed
        return pq.size();
    }
}
