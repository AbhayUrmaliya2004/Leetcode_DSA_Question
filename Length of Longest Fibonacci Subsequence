/*
* Leetcode :- (873)
* T.C :- O((N^2)*logN)
* S.C :- O(1)
* Intuition :- Make a set of two numbers and then consider them to be the first and second number of
* fibonacci series and after that we need to find the sum of (first+second) to increase the series 
* since the array is sorted then try Binary Search for finding the next element and then change the 
* first and second element and continue the process and keep track of maximum possible length
*/
class Solution {
    public int lenLongestFibSubseq(int[] arr) {
        int ans = 2;

        int n = arr.length;
        for(int i=0 ; i<n-1 ; i++){
            for(int j=i+1 ; j<n ; j++){
                int res = helper(arr, i, j);
                ans = Math.max(res, ans);
            }
        }

        return ans==2?0:ans;
    }
    public int helper(int[] arr, int i, int j){
        int first = arr[i], second = arr[j];
        int st = j+1, end=arr.length-1;

        int count = 2;
        while(st<=end){
            int mid = st+(end-st)/2;
            if(arr[mid] == first+second){
                count++;
                first = second;
                second = arr[mid];
                st = mid+1;
                end = arr.length-1;
            } else if(arr[mid] > first+second){
                end = mid-1;
            } else {
                st = mid+1;
            }
        }

        return count;
    }
}
