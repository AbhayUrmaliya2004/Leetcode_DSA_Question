/*
* Intuition :- If we go to the obstacle we have tor remove one more obstacle and if go to 0 no
* need to remove therefore problem reduces to graph with weights and we need to reach the (m-1, n-1)
* from (0,0) thus simple graph traversal with minimum cost which is dijstrak algorithm 
* Brute Force :- try recursion but constraints are so high 
*/
class Solution {
    public int minimumObstacles(int[][] grid) {
        int m=grid.length, n=grid[0].length;
        int[][] vis = new int[m][n];
        
        for(int[] v : vis){
            Arrays.fill(v, Integer.MAX_VALUE);
        }
        
        PriorityQueue<int[]> pq = new PriorityQueue<>((a,b)->Integer.compare(a[0],b[0]));
        //               totalCost, row, col
        pq.add(new int[]{0, 0, 0});
        vis[0][0] = 0;
        
        int[] drow = {-1, 0, +1, 0};
        int[] dcol = {0, +1, 0, -1};
        
        while(!pq.isEmpty()){
            int[] arr = pq.poll();
            int cost = arr[0];
            int row = arr[1];
            int col = arr[2];
            
            if(row == m-1 && col == n-1) return cost;
            
            for(int i=0 ; i<4 ; i++){
                int newr = row+drow[i];
                int newc = col+dcol[i];
                int newCost = cost;
                
                if(newr>=0 && newr<m && newc>=0 && newc<n){
                    if(grid[newr][newc] == 1) newCost++ ; // cost to remove obstacle 
                    
                    if(vis[newr][newc] > newCost){
                        pq.add(new int[]{newCost, newr, newc});
                        vis[newr][newc] = newCost;
                    }
                }
            }
        }
        
        return -1; // never reach 
    }
}
