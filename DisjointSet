public class DisjointSet{
      int[] size, parent;
      
      public DisjointSet(int n){
          size = new int[n];
          parent = new int[n];
          
          // initially nodes are itself's ultimate parent
          for(int i=0 ; i<n ; i++){
              parent[i] = i;
              size[i] = 1;
          }
      }   
      
      // union by size
      public boolean unionBySize(int u, int v){
          int ulp_u = findUParent(u);
          int ulp_v = findUParent(v);
          
          if(ulp_u == ulp_v){ // belong to same component
              return false; // for counting extra edges returning boolean
          }
          
          if(size[ulp_u] > size[ulp_v]){
              parent[ulp_v] = ulp_u;
              size[ulp_u] += size[ulp_v];
          } else {
              parent[ulp_u] = ulp_v; 
              size[ulp_v] += size[ulp_u];
          }
          
          return true;
      }
          
      public int findUParent(int node){
          if(parent[node] == node){
              return node;
          }
          
          return parent[node] = findUParent(parent[node]);
      }
  }
