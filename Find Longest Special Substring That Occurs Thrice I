/*
* Leetcode :- (2981)
* T.C :- O(N^2)
* S.C :- O(N^2)
*/
class Solution {
    public int maximumLength(String s) {
        Map<String, Integer> mp = new HashMap<>();
        
        int size=s.length(), maxi=0;
        
        for(int st=0 ; st<size ; st++){
            for(int end=st+1; end<=size ; end++){
                if(s.charAt(st) != s.charAt(end-1)) break;
                
                String substr = s.substring(st, end);
                
                mp.put(substr, mp.getOrDefault(substr, 0)+1);
                if(mp.get(substr) > 2){
                    maxi = Math.max(maxi, substr.length());
                }
            }
        }

        return maxi==0 ? -1 : maxi;
    }
}

// LeetCode - (2981)
--> O(N^2)
class Solution {
    public int maximumLength(String s) {
        Map<String, Integer> map = new HashMap<>();
        for(int i=0 ; i<s.length() ; i++){
                String t1 = s.charAt(i)+"";
                if(!map.containsKey(t1)){
                    map.put(t1, 1);
                }else{
                    map.put(t1, map.get(t1)+1);
                }
            
            int j=i+1 ;
            while(i<s.length()-1 && j < s.length()&& s.charAt(i) == s.charAt(j)){
                String t = s.substring(i, j+1);
                if(!map.containsKey(t)){
                    map.put(t, 1);
                }else{
                    map.put(t, map.get(t)+1);
                }
                
                j++ ;
            }
        }
        System.out.println(map);
        int max = -1 ;
        for(String st : map.keySet()){
           if(map.get(st)>=3)max = Math.max(max, st.length());
        }
        return max ;
    }
}
